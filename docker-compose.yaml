services:
  postgres:
    image: postgres:15
    restart: always
    container_name: wb-postgres
    environment:
      - POSTGRES_USER=wb
      - POSTGRES_PASSWORD=wbpass
      - POSTGRES_DB=wborders
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wb -d wborders"]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka:
    image: bitnami/kafka:3.6
    container_name: wb-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@wb-kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://wb-kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      postgres:
        condition: service_healthy

  app:
    build:
      context: .
      dockerfile: deploy/Dockerfile
    container_name: wb-app
    environment:
      - HTTP_PORT=8080
      - DB_STRING=postgres://wb:wbpass@postgres:5432/wborders?sslmode=disable
      - KAFKA_BROKERS=wb-kafka:9092
      - KAFKA_TOPIC=orders
      - KAFKA_GROUP_ID=orders-service
      - KAFKA_DLT=orders.dlq
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  pg_data:
  kafka_data:
